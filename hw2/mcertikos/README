<<<<<<< HEAD
List here the following info:
1. who you have worked with; 
2. whether you coded this assignment together, and if not, who worked on which part;
3. brief description of what you have implemented;
4. and anything else you would like us to know.
=======
List here the name of your partner, answers to the questions in the "Question" section of the lab, the brief description of what you have implemented, and anything else you would like us to know.

1. Partner: ZhiPei Luo (Because we want to practice more so for Lab1  we implemented the code individually. However, the testcases are created together for cooperation)

2. Question A:
# A1.  At what points does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?

##A: When the boot loader(actually this is boot1 loaded by boot0) starts to function and switches the process from real mode to 32-bit protected mode. The instruction is listed below:(This set CR0 register = 1, the system is in protected mode)
     "movl %eax, %cr0"

# A2. What is the last instruction of the boot loader executed, and what is the first instruction of the kernel it just loaded?
##A: Last instruction is in 'exec_kernel.S' where boot loader setting arguments and jump to kernel entry point.: In 'boot1main.c', it call exec_kernal function to jmp into kernel entry point, then in 'exec_kernel.s':
     "jmp *%edx"     

     First instruction: Using gdb to debug, I found the first instruction is to check wheter the bootloader magic number information:
      (cli to clear global flags)
      "cmp    $0x2badb002,%eax"

# A3. Where is the first instruction of the kernel?
##A:  It's in entry.s file, '.global start' below 'start' label.

# A4. How does the boot loader decide how many sectors it must read in order to fetch the entire kernel from disk? Where does it find this information?
##A: Boot loader fetch this information from ELF-format file. In load_kernel function from 'boot1main.c':
      'readsection((uint32_t) ELFHDR, SECTOR_SIZE * 8, 0, dkernel);' (SECTOR_SIZE is defined in boot1lib.h = 512) 
      This read section is recalled multiple times according to the size of Kernel by using this for loop:
      ph = (proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
	eph = ph + ELFHDR->e_phnum;

	for (; ph < eph; ph++)
	{
		readsection(ph->p_va, ph->p_memsz, ph->p_offset, dkernel);
	}
     All the above code are implemented in boot1main.c and the information boot loader seeks is in elf-format file:boot1.elf

3. Brief Description of Implementation:
#3.1 MATIntro layer:
     I inplemted 4 functions with index range checking. As unsigned int (although dependent ont machine, mostly is 32 bits) covers a range from âˆ’2,147,483,648 to 2,147,483,647, the range of AT is [0, 1 << 20), so the input index may out of range. I also implemented the test case for this problem in test.c.

#3.2 MATInit layer:
     I inplemted 'pmem_init' function with O(n) time complexity. I wrote the 'find_first_row' function to track the first row number for each page and store the first_row of last page to avoid redundant search. 
     Page number in [0,VM_USERLO_PI) and [VM_USERHI_PI, NPS) are reserved for kernel, so init with at_set_perm(i,1). Other pages if all coverd and usable  then set at_set_perm(i, 2);	otherwise the page is reserved by bios and at_set_perm(i, 0).
     
#3.3 MATOp layer:
    I implemented both naive_palloc and memorization-version palloc using static variable to store last-allocate page.

4. TestCases:
#4.1 MATIntro layer: Index Range Checking

5. Enrichment
# 5.1: console.c export function 'cons_putc' by dprinf.c include console.h file. This function is called in dprintf.c's function 'cputs'

# 5.2 Explain the following from video.c:
##A: This code does: if cursor current position is bigger then content CRT_SIZE (which equals to (CRT_ROWS * CRT_COLS)), it will move the memory buffer for 1 line and do scolling in the video display. Finally, reduce the current position of 1 line length (CRT_COLS)

# 5.3 Explore GCC's calling convention on the x86, and trace the execution of the following code step-by-step:
  Output: x 1, y 3, z 4
  
# 5.4 Output: He110 World. It change 57616 to 16-based number which is 0xe110 and get the value from address of 0x00646c72 to fetch the content 'rld'.

# 5.5 Output: x=3, y=9478072. Because we only give dprinf one value, so for the second value is not specified.

# 5.6 I would reversed the arguments inside the dprintf.
>>>>>>> lab1
